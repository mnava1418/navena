#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
const debug = require('debug')('navena:server');
const http = require('http');
const https = require('https');
const fs = require('fs');
const express = require('express');


const startHttpServer = () => {
  const httpApp = express()
  httpApp.get('*', (req, res) => {
    res.redirect(`https://navenanutricion.com${req.url}`)
  })
  
  const httpServer =  http.createServer(httpApp)
  httpServer.listen(80, (err) => {
    if(err) {
      console.log(err)
    } else {
      console.log('Http Server listening on port: 80')
    }
  })
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '443');
app.set('port', port);

/**
 * Create HTTPS server.
 */
// Certificate
const privateKey = fs.readFileSync('/etc/letsencrypt/live/navenanutricion.com/privkey.pem', 'utf8');
const certificate = fs.readFileSync('/etc/letsencrypt/live/navenanutricion.com/cert.pem', 'utf8');
const ca = fs.readFileSync('/etc/letsencrypt/live/navenanutricion.com/chain.pem', 'utf8');

const credentials = {
  key: privateKey,
  cert: certificate,
  ca: ca
};

startHttpServer()
const server = https.createServer(credentials, app)
  

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
